[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Uday's AI Blog",
    "section": "",
    "text": "Summary - Logistic Regression Algorithm\n\n\n\nLogistic Regression\n\n\nclassification\n\n\n\nsummary and useful points to know about LR\n\n\n\nUday\n\n\nAug 11, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSummary - KNN Algorithm\n\n\n\nKNN\n\n\n\nTraining process and useful points to know about KNN\n\n\n\nUday\n\n\nAug 10, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNormalization for Better Generalization and Faster Training\n\n\n\nNLP\n\n\nBatchnorm\n\n\nlayernorm\n\n\nnormalization\n\n\n\nDifferent types of Normalization layers ( Batch Norm, Layernorm)\n\n\n\nUday\n\n\nJun 20, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHypothesis Testing\n\n\n\nHypothesis testing\n\n\nnull hypothesis\n\n\n2-sample test\n\n\none-sample-test\n\n\np-value\n\n\nanova\n\n\n\nHypothesis testing using permutation\n\n\n\nUday\n\n\nJun 15, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEffective Training and Debugging of a Neural Networks\n\n\n\nDebugging NN\n\n\nNeural Network\n\n\ntraining\n\n\n\nProper ways to training and debugging of a neural network\n\n\n\nUday\n\n\nFeb 3, 2020\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "notebooks/Effective_Training_and_Debugging_of_a_Neural_Networks.html",
    "href": "notebooks/Effective_Training_and_Debugging_of_a_Neural_Networks.html",
    "title": "Effective Training and Debugging of a Neural Networks",
    "section": "",
    "text": "In this blog, I want to discuss Training and Debugging of a NN in a practical manner.\nI am taking a cyber troll dataset. It is a classification data with labels aggressive or not. This is mostly inspired from this blog.\nWhenever I train any neural network, I will divide that into subtasks as below. I am assuming, you already set your project goals and evaluation metrics.\n##basic imports\nimport numpy as np\nimport pandas as pd\nimport random as rn\nimport tensorflow as tf\nfrom tensorflow.keras.layers import LSTM, GRU, Dense, Input, Embedding\nfrom tensorflow.keras.models import Model"
  },
  {
    "objectID": "notebooks/Effective_Training_and_Debugging_of_a_Neural_Networks.html#data-processing",
    "href": "notebooks/Effective_Training_and_Debugging_of_a_Neural_Networks.html#data-processing",
    "title": "Effective Training and Debugging of a Neural Networks",
    "section": "Data Processing",
    "text": "Data Processing\n\n##reading the data\ncyber_troll_data = pd.read_json('Dataset for Detection of Cyber-Trolls.json', lines=True)\ncyber_troll_data.head(2)\n\n\n\n\n\n\n\n\ncontent\nannotation\nextras\nmetadata\n\n\n\n\n0\nGet fucking real dude.\n{'notes': '', 'label': ['1']}\nNaN\n{'first_done_at': 1527503426000, 'last_updated...\n\n\n1\nShe is as dirty as they come and that crook R...\n{'notes': '', 'label': ['1']}\nNaN\n{'first_done_at': 1527503426000, 'last_updated...\n\n\n\n\n\n\n\n\n#basic preprocessing\ncyber_troll_data['label']=cyber_troll_data.annotation.apply(lambda x: int(x['label'][0]))\ncyber_troll_data = cyber_troll_data[['content', 'label']]\ncyber_troll_data.head()\n\n\n\n\n\n\n\n\ncontent\nlabel\n\n\n\n\n0\nGet fucking real dude.\n1\n\n\n1\nShe is as dirty as they come and that crook R...\n1\n\n\n2\nwhy did you fuck it up. I could do it all day ...\n1\n\n\n3\nDude they dont finish enclosing the fucking sh...\n1\n\n\n4\nWTF are you talking about Men? No men thats no...\n1\n\n\n\n\n\n\n\n\n#its a imbalance one\ncyber_troll_data.label.value_counts()\n\n0    12179\n1     7822\nName: label, dtype: int64\n\n\n\n##splitting data into train, validation and Test data. \nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(cyber_troll_data.content, cyber_troll_data.label, \n                                                    test_size=0.40, stratify=cyber_troll_data.label, random_state=54)\n\nX_test, X_val, y_test, y_val = train_test_split(X_test, y_test, \n                                                    test_size=0.50, stratify=y_test, random_state=32)\n\n\ntokenizer = tf.keras.preprocessing.text.Tokenizer()\ntokenizer.fit_on_texts(X_train)\n\n\nX_train_tokens = tokenizer.texts_to_sequences(X_train)\nX_test_tokens = tokenizer.texts_to_sequences(X_test)\nX_val_tokens = tokenizer.texts_to_sequences(X_val)\n\n\nnumber_vocab = len(tokenizer.word_index)+1\n\nX_train_pad_tokens = tf.keras.preprocessing.sequence.pad_sequences(X_train_tokens, maxlen=24, padding='post', truncating='post')\nX_test_pad_tokens = tf.keras.preprocessing.sequence.pad_sequences(X_test_tokens, maxlen=24, padding='post', truncating='post')\nX_val_pad_tokens = tf.keras.preprocessing.sequence.pad_sequences(X_val_tokens, maxlen=24, padding='post', truncating='post')\n\nWe prepared the data. I am not doing perfect preprocessing and tokenization. You can do preprocessing in a better way.\nWe have,\nX_train_pad_tokens, y_train  --&gt; To train   X_val_pad_tokens, y_val   --&gt; To validate and Tune   X_test_pad_tokens, y_test  --&gt; Don't use this data while trainig. Only use this after you are done with all the modelling.\nI am creating Training and Validation datasets to iterate over those using the tf.data pipeline. Please use less data as of now because, it will be easier to debug and easier to know about the error if we have any in our network, I will discuss this below. I am only using the first 100 data points with a batch size of 32.\n\n##Creating the dataset( only 100 data points and will explain why after trainig process.) \ntrain_dataset = tf.data.Dataset.from_tensor_slices((X_train_pad_tokens[0:100], y_train[0:100]))\ntrain_dataset = train_dataset.shuffle(1000).batch(32, drop_remainder=True)\ntrain_dataset = train_dataset.prefetch(buffer_size=tf.data.experimental.AUTOTUNE)\n\n##creating test dataset using tf.data\nval_dataset = tf.data.Dataset.from_tensor_slices((X_val_pad_tokens[0:100], y_val[0:100]))\nval_dataset = val_dataset.batch(32, drop_remainder=True)\nval_dataset = val_dataset.prefetch(buffer_size=tf.data.experimental.AUTOTUNE)\n\n\nChecking the data pairing issue and check the data given to neural network is correct or not. If it got corrupted, check/debug the data pipleline and rectify it. If you have images, try to plot the images and check.\nbelow, i have written a basic for loop to print. You can also print the words corresponding to the numbers and check.\n\nfor input_text, output_label in train_dataset:\n    print(input_text[0:3], output_label[0:3])\n    break\n\ntf.Tensor(\n[[ 186   89  741    5  385   43   11  127  919 1082  157    1    9  251\n     5  628    3 6970    5   11 4641   30    6   40]\n [  27    3   26   28 1021   29    6    0    0    0    0    0    0    0\n     0    0    0    0    0    0    0    0    0    0]\n [4647   72  606   43   16  684  223    1    9    3 4648  923    0    0\n     0    0    0    0    0    0    0    0    0    0]], shape=(3, 24), dtype=int32) tf.Tensor([0 1 1], shape=(3,), dtype=int32)"
  },
  {
    "objectID": "notebooks/Effective_Training_and_Debugging_of_a_Neural_Networks.html#creating-a-neural-network",
    "href": "notebooks/Effective_Training_and_Debugging_of_a_Neural_Networks.html#creating-a-neural-network",
    "title": "Effective Training and Debugging of a Neural Networks",
    "section": "Creating a Neural Network",
    "text": "Creating a Neural Network\nSome of the rules to follow while writing/training your Neural Network.\n\nStart with a simple architecture - We are doing a text classification so, we can try a single layer LSTM.\nUse well studied default parameters like activation = relu, optimizer = adam, initialization = he for relu and Glorot for sigmoid/tanh. To know more about this, please read this blog.\nFix the random seeds so that we can reproduce the initializations/results to tune our models. - You have to fix all the random seeds in your model.\nNormalize the input data.\n\nI am writing a simple LSTM model by following all the above rules.\n\n##LSTM\n\n##fixing numpy RS\nnp.random.seed(42)\n\n##fixing tensorflow RS\ntf.random.set_seed(32)\n\n##python RS\nrn.seed(12)\n\n\n##model\ndef get_model():\n    input_layer = Input(shape=(24,), name=\"input_layer\")\n    ##i am initilizing randomly. But you can use predefined embeddings. \n    x_embedd = Embedding(input_dim=number_vocab, output_dim=100, input_length=24, mask_zero=True, \n                        embeddings_initializer=tf.keras.initializers.RandomNormal(mean=0, stddev=1, seed=23),\n                         name=\"Embedding_layer\")(input_layer)\n    \n    x_lstm = LSTM(units=20, activation='tanh', recurrent_activation='sigmoid', use_bias=True, \n                 kernel_initializer=tf.keras.initializers.glorot_uniform(seed=26),\n                 recurrent_initializer=tf.keras.initializers.orthogonal(seed=54),\n                 bias_initializer=tf.keras.initializers.zeros(), name=\"LSTM_layer\")(x_embedd)\n    \n    x_out = Dense(1, activation='sigmoid', kernel_initializer=tf.keras.initializers.glorot_uniform(seed=45),\n                  name=\"output_layer\")(x_lstm)\n    \n    basic_lstm_model = Model(inputs=input_layer, outputs=x_out, name=\"basic_lstm_model\")\n    \n    return basic_lstm_model\n\n\nbasic_lstm_model = get_model()\nbasic_lstm_model_anothertest = get_model()\n\n Now i created two models named basic_lstm_model, basic_lstm_model_anothertest. Those two model initial weights will be the same because of the fixed random seed. This removes a factor of a variation and very useful to tune parameters by doing some experimentation on the same weight initialization.\nwe can check this as below.\n\n[np.all(basic_lstm_model.get_weights()[i]==basic_lstm_model_anothertest.get_weights()[i]) \\\n for i in range(len(basic_lstm_model.get_weights()))]\n\n[True, True, True, True, True, True]"
  },
  {
    "objectID": "notebooks/Effective_Training_and_Debugging_of_a_Neural_Networks.html#training-a-nn",
    "href": "notebooks/Effective_Training_and_Debugging_of_a_Neural_Networks.html#training-a-nn",
    "title": "Effective Training and Debugging of a Neural Networks",
    "section": "Training a NN",
    "text": "Training a NN\nLoss functions - If we calculate the loss in the wrong manner, we will get the wrong gradients and it doesn’t learn perfectly.\nSome of the mistakes in Loss functions:\n\none of the main mistakes in the loss creation is giving wrong inputs to the loss function. If we are using the cross-entropy, you have to give one-hot vector as input otherwise, use sparse_categorical_crossentropy(no need to give the one-hot vectors).\nIf you are using a function that calculates the loss using unnormalized logits, don’t give the probability output as input to the loss function. ( check logits parameter in the tensorflow loss functions)\nIt is useful to mask unnecessary output while calculating loss. Eg: don’t include output at the padded word position while calculation loss.\nSelecting a loss function that allowing the calculation of large error values. Because of this, your loss may explode, you may get NaN and it affects the gradients too.\n\n\n##masked loss Eg for sequence output. \ndef maskedLoss(y_true, y_pred):\n    #getting mask value\n    mask = tf.math.logical_not(tf.math.equal(y_true, 0))\n    \n    #calculating the loss\n    loss_ = loss_function(y_true, y_pred)\n    \n    #converting mask dtype to loss_ dtype\n    mask = tf.cast(mask, dtype=loss_.dtype)\n    \n    #applying the mask to loss\n    loss_ = loss_*mask\n    \n    #getting mean over all the values\n    loss_ = tf.reduce_sum(loss_)/tf.reduce_sum(mask)\n    return loss_\n\n\n##creating a loss object for this classification problem\nloss_function = tf.keras.losses.BinaryCrossentropy(from_logits=False, reduction='auto')\n\nTraining and validation functions\n\nWe have to take care of the toggling training flag because some of the layers behaves differently in training and testing.\n\n\n#optimizer\noptimizer = tf.keras.optimizers.Adam(learning_rate=0.001)\n\n#trainign function\n@tf.function\ndef train_step(input_vector, output_vector,loss_fn):\n    #taping the gradients\n    with tf.GradientTape() as tape:\n        #for ward prop\n        output_predicted = basic_lstm_model(inputs=input_vector, training=True)\n        #loss calculation\n        loss = loss_fn(output_vector, output_predicted)\n    #getting gradients\n    gradients = tape.gradient(loss, basic_lstm_model.trainable_variables)\n    #applying gradients\n    optimizer.apply_gradients(zip(gradients, basic_lstm_model.trainable_variables))\n    return loss, output_predicted\n\n#validation function\n@tf.function\ndef val_step(input_vector, output_vector, loss_fn):\n    #forward prop\n    output_predicted = basic_lstm_model(inputs=input_vector, training=False)\n    #loss calculation\n    loss = loss_fn(output_vector, output_predicted)\n    return loss, output_predicted\n\nTraining the NN with proper data.\n\nWhile Training the model, I suggest you don't write the complex pipelining of the data and train your network at the start. If you do this, finding the bugs in your network is very difficult. Just get a few instances of data( maybe 10% of your total train data if you have 10K records) into your RAM and try to train your network. In this case, I have total data in my RAM so, I will slice a few batches and try to train the network.\nI will suggest you don't include the data augmentation as of now. It is useful for regularizing the model but try to avoid it at the start. Even if you do data augmentation, be careful about the labels. Eg: In the segmentation task, if you flip the image, you have to flip the label image as well.\nCheck for casting issues. Eg. If layer needs int8, give the int8 value only as input. If you have float values, just cast the dtype. If data stored in the disk is float32, load the data into RAM with the same dtype.\nCheck the data pairing issue i.e. while giving the train data, you have to give the correct pairs of x and y. Training the NN with proper data.\n\nTraining the NN with data for 2 epochs and printing batchwise loss and finally getting mean of all those. Even if you use the .fit method of Keras API, it prints the aggregated value of loss/metric as part of verbose. You can check that aggregate class here\n\n##training\nEPOCHS=2\n\n##metrics # Even if you use .fit method, it alsocalculates batchwise loss/metric and aggregates those.  \ntrain_loss = tf.keras.metrics.Mean(name='train_loss')\nval_loss = tf.keras.metrics.Mean(name='test_loss')\n\nfor epoch in range(EPOCHS):\n    #losses\n    train_loss.reset_states()\n    val_loss.reset_states()\n    \n    #training\n    print('Batchwise Train loss')\n    for text_seq, label_seq in train_dataset:\n        loss_, pred_out = train_step(text_seq, label_seq, loss_function)\n        print(loss_)\n        train_loss(loss_)\n    \n    #validation\n    print('Batchwise Val loss')\n    for text_seq_val, label_seq_val in val_dataset:\n        loss_test, pred_out_test = val_step(text_seq_val, label_seq_val, loss_function)\n        print(loss_test)\n        val_loss(loss_test)\n    \n    template = 'Epoch {}, Mean Loss: {}, Mean Val Loss: {}'\n    \n    print(template.format(epoch+1, train_loss.result(), val_loss.result()))\n    print('-'*50)\n\nBatchwise Train loss\ntf.Tensor(0.69066906, shape=(), dtype=float32)\ntf.Tensor(0.6978342, shape=(), dtype=float32)\ntf.Tensor(0.7214557, shape=(), dtype=float32)\nBatchwise Val loss\ntf.Tensor(0.7479876, shape=(), dtype=float32)\ntf.Tensor(0.6868224, shape=(), dtype=float32)\ntf.Tensor(0.71952724, shape=(), dtype=float32)\nEpoch 1, Mean Loss: 0.7033197283744812, Mean Val Loss: 0.7181124687194824\n--------------------------------------------------\nBatchwise Train loss\ntf.Tensor(0.6816538, shape=(), dtype=float32)\ntf.Tensor(0.69258916, shape=(), dtype=float32)\ntf.Tensor(0.6689039, shape=(), dtype=float32)\nBatchwise Val loss\ntf.Tensor(0.744266, shape=(), dtype=float32)\ntf.Tensor(0.681653, shape=(), dtype=float32)\ntf.Tensor(0.71762204, shape=(), dtype=float32)\nEpoch 2, Mean Loss: 0.6810489296913147, Mean Val Loss: 0.7145137190818787\n--------------------------------------------------"
  },
  {
    "objectID": "notebooks/Effective_Training_and_Debugging_of_a_Neural_Networks.html#debugging-and-enhancing-nn",
    "href": "notebooks/Effective_Training_and_Debugging_of_a_Neural_Networks.html#debugging-and-enhancing-nn",
    "title": "Effective Training and Debugging of a Neural Networks",
    "section": "Debugging and Enhancing NN",
    "text": "Debugging and Enhancing NN\nTill now, we have created a basic NN for our problem and trained the NN. Now I will discuss some hacks to debug and enhance your training process to get better results.\n\nUsing Basic print statements and checking the shapes of input and output of every layer. Using this, we can remove the shape related error or basic errors related to output while creating a model. If you want to print in tensorflow code, please use tf.print\nWith Eager execution, we can debug our code very easily. it can be done using pdb or using any ide. You have to set tf.config.experimental_run_functions_eagerly(True) to debug your tf2.0 functions.\n\n\n##LSTM\n\ntf.config.experimental_run_functions_eagerly(True)\n\n##fixing numpy RS\nnp.random.seed(42)\n\n##fixing tensorflow RS\ntf.random.set_seed(32)\n\n##python RS\nrn.seed(12)\n\nimport pdb\n\n##model\ndef get_model_debug():\n    input_layer_d = Input(shape=(24,), name=\"input_layer\")\n    ##i am initilizing randomly. But you can use predefined embeddings. \n    x_embedd_d= Embedding(input_dim=number_vocab, output_dim=100, input_length=24, mask_zero=True, \n                        embeddings_initializer=tf.keras.initializers.RandomNormal(mean=0, stddev=1, seed=23),\n                         name=\"Embedding_layer\")(input_layer_d)\n    \n    #LSTM\n    x_lstm_d = LSTM(units=20, activation='tanh', recurrent_activation='sigmoid', use_bias=True, \n                 kernel_initializer=tf.keras.initializers.glorot_uniform(seed=26),\n                 recurrent_initializer=tf.keras.initializers.orthogonal(seed=54),\n                 bias_initializer=tf.keras.initializers.zeros(), name=\"LSTM_layer\")(x_embedd_d)\n    \n    #trace\n    pdb.set_trace()\n    \n    x_out_d = Dense(1, activation='sigmoid', kernel_initializer=tf.keras.initializers.glorot_uniform(seed=45),\n                  name=\"output_layer\")(x_lstm_d)\n    \n    basic_lstm_model_d = Model(inputs=input_layer_d, outputs=x_out_d, name=\"basic_lstm_model_d\")\n    \n    return basic_lstm_model_d\n\n\nbasic_model_debug = get_model_debug()\n\ntf.config.experimental_run_functions_eagerly(False)\n\n&gt; &lt;ipython-input-14-476c66b41633&gt;(31)get_model_debug()\n-&gt; x_out_d = Dense(1, activation='sigmoid', kernel_initializer=tf.keras.initializers.glorot_uniform(seed=45),\n(Pdb)  locals()\n{'input_layer_d': &lt;tf.Tensor 'input_layer_2:0' shape=(None, 24) dtype=float32&gt;, 'x_embedd_d': &lt;tf.Tensor 'Embedding_layer_2/Identity:0' shape=(None, 24, 100) dtype=float32&gt;, 'x_lstm_d': &lt;tf.Tensor 'LSTM_layer_2/Identity:0' shape=(None, 20) dtype=float32&gt;}\n(Pdb)  n\n&gt; &lt;ipython-input-14-476c66b41633&gt;(32)get_model_debug()\n-&gt; name=\"output_layer\")(x_lstm_d)\n(Pdb)  n\n&gt; &lt;ipython-input-14-476c66b41633&gt;(34)get_model_debug()\n-&gt; basic_lstm_model_d = Model(inputs=input_layer_d, outputs=x_out_d, name=\"basic_lstm_model_d\")\n(Pdb)  c\n\n\nYou can also Debug the Trainig loopas shown below.\nFor PDB instrctions, please check this PDF.\nMy preference and suggestion is to use IDE Debugger\n\n##training\nEPOCHS=1\n##metrics # Even if you use .fit method, it alsocalculates batchwise loss/metric and aggregates those.  \ntrain_loss = tf.keras.metrics.Mean(name='train_loss')\n\ntf.config.experimental_run_functions_eagerly(True)\nfor epoch in range(EPOCHS):\n    train_loss.reset_states()\n    \n    print('Batchwise Train loss')\n    for text_seq, label_seq in train_dataset:\n        pdb.set_trace()\n        loss_, pred_out = train_step(text_seq, label_seq, loss_function)\n        print(loss_)\n        train_loss(loss_)\n    \n    template = 'Epoch {}, Mean Loss: {}'\n    \n    print(template.format(epoch+1, train_loss.result()))\n    print('-'*50)\ntf.config.experimental_run_functions_eagerly(False)\n\nBatchwise Train loss\n&gt; &lt;ipython-input-15-aa3750dbfb83&gt;(13)&lt;module&gt;()\n-&gt; loss_, pred_out = train_step(text_seq, label_seq, loss_function)\n(Pdb)  s\n--Call--\n&gt; d:\\softwares\\anaconda3\\envs\\tf2\\lib\\site-packages\\tensorflow_core\\python\\eager\\def_function.py(551)__call__()\n-&gt; def __call__(self, *args, **kwds):\n(Pdb)  c\ntf.Tensor(0.66431165, shape=(), dtype=float32)\n&gt; &lt;ipython-input-15-aa3750dbfb83&gt;(12)&lt;module&gt;()\n-&gt; pdb.set_trace()\n(Pdb)  c\ntf.Tensor(0.6668887, shape=(), dtype=float32)\n&gt; &lt;ipython-input-15-aa3750dbfb83&gt;(13)&lt;module&gt;()\n-&gt; loss_, pred_out = train_step(text_seq, label_seq, loss_function)\n(Pdb)  c\ntf.Tensor(0.6523603, shape=(), dtype=float32)\nEpoch 1, Mean Loss: 0.6611868739128113\n--------------------------------------------------\n\n\n\nOnce you are done with the creation of the model, Try to Train the model with less data( i have taken 100 samples) and try to overfit the model to that data. To do so we increase the capacity of our model (e.g. add layers or filters) and verify that we can reach the lowest achievable loss (e.g. zero). If your model is unable to overfit a few data points, then either it’s too small (which is unlikely in today’s age), or something is wrong in its structure or the learning algorithm. check for bugs and try to remove those. I will discuss some of the bugs below. If this model is working fine without any bugs, you can train with full data.\nTensorboard is another important tool to debug NN while training. You can visualize the Loss, metrics, gradient/output histograms, distributions, graph and many more. I am writing code to plot all these in the tensorboard.\nAs of now, we are printing/plotting the Mean loss/metric for all the batches in one epoch and, based on this we are analyzing the model performance. This may lead to wrong models for some of the loss functions/metrics. Even if you use the smoothing, it is not an accurate one, it will get an exponentially weighted average over batch-wise loss/metric. so Try to get a loss/metric for entire data of train and Val/test. If you have time/space constraint, at least get for the val/test data. Eg: Mean of Cross entropy over batches is equal to the cross-entropy over total data but not for AUC/F1 score.\nBelow I have written code that calculates loss and metric(AUC) over batches and gets the mean as well as a total loss at once and a better Training and validation functions with tensorboard. please look into it.\n\n\n##training\n\n##model creation\nbasic_lstm_model = get_model()\n\n##optimizer\noptimizer = tf.keras.optimizers.Adam(learning_rate=0.005)\n\n##metric\nfrom sklearn.metrics import roc_auc_score\n\n##train step function to train\n@tf.function\ndef train_step(input_vector, output_vector,loss_fn):\n    with tf.GradientTape() as tape:\n        #forward propagation\n        output_predicted = basic_lstm_model(inputs=input_vector, training=True)\n        #loss\n        loss = loss_fn(output_vector, output_predicted)\n    #getting gradients\n    gradients = tape.gradient(loss, basic_lstm_model.trainable_variables)\n    #applying gradients\n    optimizer.apply_gradients(zip(gradients, basic_lstm_model.trainable_variables))\n    return loss, output_predicted, gradients\n\n##validation step function\n@tf.function\ndef val_step(input_vector, output_vector, loss_fn):\n    #getting output of validation data\n    output_predicted = basic_lstm_model(inputs=input_vector, training=False)\n    #loss calculation\n    loss = loss_fn(output_vector, output_predicted)\n    return loss, output_predicted\n\nimport math\n\n#batch size\nBATCH_SIZE=32\n##number of epochs\nEPOCHS=10\n\n##metrics # Even if you use .fit method, it alsocalculates batchwise loss/metric and aggregates those.  \ntrain_loss = tf.keras.metrics.Mean(name='train_loss')\nval_loss = tf.keras.metrics.Mean(name='val_loss')\ntrain_metric = tf.keras.metrics.Mean(name=\"train_auc\")\nval_metric = tf.keras.metrics.Mean(name=\"val_metric\")\n\n#tensorboard file writers\nwtrain = tf.summary.create_file_writer(logdir='logs\\\\train')\nwval = tf.summary.create_file_writer(logdir='logs\\\\val')\n\n\n#no of data points/batch_size i.e number of iterations in the one epoch\niters = math.ceil(100/BATCH_SIZE) \n\n#training anf validating\nfor epoch in range(EPOCHS):\n    \n    #resetting the states of the loss and metrics\n    train_loss.reset_states()\n    val_loss.reset_states()\n    train_metric.reset_states()\n    val_metric.reset_states()\n    \n    ##counter for train loop iteration\n    counter = 0\n    \n    #lists to save true and validation data. \n    train_true = []\n    train_predicted = []\n    val_true = []\n    val_predicted = []\n    \n    #ietrating over train data batch by batch\n    for text_seq, label_seq in train_dataset:\n        #train step\n        loss_, pred_out, gradients = train_step(text_seq, label_seq, loss_function)\n        #adding loss to train loss\n        train_loss(loss_)\n        #counting the step number\n        temp_step = epoch*iters+counter\n        counter = counter + 1\n        \n        #calculating AUC for batch\n        batch_metric = roc_auc_score(label_seq, pred_out)\n        train_metric(batch_metric)\n        \n        #appending it to list\n        train_predicted.append(pred_out)\n        train_true.append(label_seq)\n        \n        ##tensorboard \n        with tf.name_scope('per_step_training'):\n            with wtrain.as_default():\n                tf.summary.scalar(\"batch_loss\", loss_, step=temp_step)\n                tf.summary.scalar('batch_metric', batch_metric, step=temp_step)\n        with tf.name_scope(\"per_batch_gradients\"):\n            with wtrain.as_default():\n                for i in range(len(basic_lstm_model.trainable_variables)):\n                    name_temp = basic_lstm_model.trainable_variables[i].name\n                    tf.summary.histogram(name_temp, gradients[i], step=temp_step)\n    \n    #calculating the final loss and metric\n    train_true = tf.concat(train_true, axis=0)\n    train_predicted = tf.concat(train_predicted, axis=0)\n    train_loss_final = loss_function(train_true, train_predicted)\n    train_metric_auc = roc_auc_score(train_true, train_predicted)\n    \n    #validation data\n    for text_seq_val, label_seq_val in val_dataset:\n        #getting val output\n        loss_val, pred_out_val = val_step(text_seq_val, label_seq_val, loss_function)\n        #appending to lists\n        val_true.append(label_seq_val)\n        val_predicted.append(pred_out_val)\n        val_loss(loss_val)\n        \n        #calculating metric\n        batch_metric_val = roc_auc_score(label_seq_val, pred_out_val)\n        val_metric(batch_metric_val)\n    \n    \n    #calculating final loss and metric   \n    val_true = tf.concat(val_true, axis=0)\n    val_predicted = tf.concat(val_predicted, axis=0)\n    val_loss_final = loss_function(val_true, val_predicted)\n    val_metric_auc = roc_auc_score(val_true, val_predicted)\n    \n    #printing\n    template = '''Epoch {}, Train Loss: {:0.6f}, Mean batch Train Loss: {:0.6f}, AUC: {:0.5f}, Mean batch Train AUC: {:0.5f},\n    Val Loss: {:0.6f}, Mean batch Val Loss: {:0.6f}, Val AUC: {:0.5f}, Mean batch Val AUC: {:0.5f}'''\n    \n    print(template.format(epoch+1, train_loss_final.numpy(), train_loss.result(), \n                          train_metric_auc, train_metric.result(), val_loss_final.numpy(),\n                          val_loss.result(), val_metric_auc, val_metric.result()))\n    print('-'*30)\n    \n    #tensorboard\n    with tf.name_scope(\"per_epoch_loss_metric\"):\n        with wtrain.as_default():\n            tf.summary.scalar(\"mean_loss\", train_loss.result().numpy(), step=epoch)\n            tf.summary.scalar('loss', train_loss_final.numpy(), step=epoch)\n            tf.summary.scalar('metric', train_metric_auc, step=epoch)\n            tf.summary.scalar('mean_metric', train_metric.result().numpy(), step=epoch)\n        with wval.as_default():\n            tf.summary.scalar('mean_loss', val_loss.result().numpy(), step=epoch)\n            tf.summary.scalar('loss', val_loss_final.numpy(), step=epoch)\n            tf.summary.scalar('metric', val_metric_auc, step=epoch)\n            tf.summary.scalar('mean_metric', val_metric.result().numpy(), step=epoch)\n\nEpoch 1, Train Loss: 0.700775, Mean batch Train Loss: 0.700775, AUC: 0.46829, Mean batch Train AUC: 0.45378,\n    Val Loss: 0.704532, Mean batch Val Loss: 0.704532, Val AUC: 0.48223, Mean batch Val AUC: 0.48844\n------------------------------\nEpoch 2, Train Loss: 0.596350, Mean batch Train Loss: 0.596350, AUC: 0.86608, Mean batch Train AUC: 0.86355,\n    Val Loss: 0.691127, Mean batch Val Loss: 0.691127, Val AUC: 0.52128, Mean batch Val AUC: 0.53295\n------------------------------\nEpoch 3, Train Loss: 0.508518, Mean batch Train Loss: 0.508518, AUC: 0.98973, Mean batch Train AUC: 0.98923,\n    Val Loss: 0.681388, Mean batch Val Loss: 0.681388, Val AUC: 0.55682, Mean batch Val AUC: 0.57112\n------------------------------\nEpoch 4, Train Loss: 0.441114, Mean batch Train Loss: 0.441114, AUC: 0.99554, Mean batch Train AUC: 0.99460,\n    Val Loss: 0.673574, Mean batch Val Loss: 0.673574, Val AUC: 0.58578, Mean batch Val AUC: 0.60539\n------------------------------\nEpoch 5, Train Loss: 0.368985, Mean batch Train Loss: 0.368985, AUC: 0.99868, Mean batch Train AUC: 0.99861,\n    Val Loss: 0.667929, Mean batch Val Loss: 0.667929, Val AUC: 0.61167, Mean batch Val AUC: 0.62760\n------------------------------\nEpoch 6, Train Loss: 0.306646, Mean batch Train Loss: 0.306646, AUC: 0.99956, Mean batch Train AUC: 1.00000,\n    Val Loss: 0.664882, Mean batch Val Loss: 0.664882, Val AUC: 0.62835, Mean batch Val AUC: 0.63807\n------------------------------\nEpoch 7, Train Loss: 0.249700, Mean batch Train Loss: 0.249700, AUC: 1.00000, Mean batch Train AUC: 1.00000,\n    Val Loss: 0.666024, Mean batch Val Loss: 0.666024, Val AUC: 0.63756, Mean batch Val AUC: 0.64217\n------------------------------\nEpoch 8, Train Loss: 0.195906, Mean batch Train Loss: 0.195906, AUC: 1.00000, Mean batch Train AUC: 1.00000,\n    Val Loss: 0.671024, Mean batch Val Loss: 0.671024, Val AUC: 0.64063, Mean batch Val AUC: 0.64618\n------------------------------\nEpoch 9, Train Loss: 0.151549, Mean batch Train Loss: 0.151549, AUC: 1.00000, Mean batch Train AUC: 1.00000,\n    Val Loss: 0.679804, Mean batch Val Loss: 0.679804, Val AUC: 0.64458, Mean batch Val AUC: 0.64464\n------------------------------\nEpoch 10, Train Loss: 0.111988, Mean batch Train Loss: 0.111988, AUC: 1.00000, Mean batch Train AUC: 1.00000,\n    Val Loss: 0.695000, Mean batch Val Loss: 0.695000, Val AUC: 0.64283, Mean batch Val AUC: 0.64751\n------------------------------\n\n\nI trained the model for 10 epochs and my loss is decreasing and AUC of train data became 1(overfit). But some times it may not overfit to the model. If it is not overfitting, there may be so many reasons like code written to create the model is incorrect, the model is not capable of learning the data, learning problems like vanishing or exploding gradients and many more. I will discuss these problems below and These problems may occur even while training with total data.\n\nCheck whether forward propagation is correct or not\nwhile training NN, we will use the vectorizing implementations of data manipulation. If we did any mistake in these implementations, our training process will give bad results. We can verify this with a simple hack using back prop dependency. Below are the steps to do.\n\nTake a few data points. Here I am taking 5 data points. You can get it from the data or you can generate random data with the same shape.\ndo forward propagation on the model we created with the above batch data.\nwrite a loss function that takes the true values, predicted values and returns loss as sum of the i^th data point output where i less than 5. I am using 3.\ndo the back prop and check the gradients with respect to the input data points. If you are getting non zero gradients only for i-th data point, your forward propagation is right otherwise, there is some error in the forward propagation and you have to debug the code to check the error.\n\nIn the implementation below, I have written basic implementation, not included any tensorboard/metrics and there is no need for those as well.\n\nNote: Gradient won’t flow through the embedding layer so you will get None gradients if you calculate the gradient with of loss with respect to the input. If you have the embedding layer at starting, please remove the embedding layer and give the input directly to the next layer. It is very easy to do because This layer can only be used as the first layer in a model.\n\n\n##same model with name changes and without emedding layer.\ndef get_model_check():\n    ##directly using embedding dimention of 1. It is only for checking so no problem with it. \n    input_layer = Input(shape=(24, 1), batch_size=10, name=\"input_layer_debug\")\n    \n    ##i am initilizing randomly. But you can use predefined embeddings. \n    #x_embedd = Embedding(input_dim=13732, output_dim=100, input_length=24, mask_zero=True, \n                        #embeddings_initializer=tf.keras.initializers.RandomNormal(mean=0, stddev=1, seed=23),\n                         #name=\"Embedding_layer\")(input_layer)\n    \n    x_lstm = LSTM(units=20, activation='tanh', recurrent_activation='sigmoid', use_bias=True, \n                 kernel_initializer=tf.keras.initializers.glorot_uniform(seed=26),\n                 recurrent_initializer=tf.keras.initializers.orthogonal(seed=54),\n                 bias_initializer=tf.keras.initializers.zeros(), name=\"LSTM_layer_debug\")(input_layer)\n    \n    x_out = Dense(1, activation='sigmoid', kernel_initializer=tf.keras.initializers.glorot_uniform(seed=45),\n                  name=\"output_layer_debug\")(x_lstm)\n    \n    basic_model_debug = Model(inputs=input_layer, outputs=x_out, name=\"basic_lstm_model_debug\")\n    \n    return basic_model_debug\n\nbasic_model_debug = get_model_check()\n\n##generated random 5 data points of shape (24,1) i.e 4 time steps and 1 dim embedding. \ntemp_features = np.random.randint(low=1, high=5, size=(5,24, 1))\n\n##generated the a random output zero or 1. I think, there is no use for this as well because \n#we will calculate loss only with predicted values\ntemp_outs = np.random.randint(0, 2, size=(5,1))\n\ndef loss_to_ckgrads(y_true, y_pred):\n    #y_pred is one dimentional you can give directly one data point prediction as loss. \n    #I am giving loss as 3rd data point prediction so we will get non zero gradients only for 3rd data point. \n    #if your prediction is sequence, please add all the i-th data point predictions and return those. \n    return y_pred[2]\n\ndef get_gradient(model, x_tensor):\n    #taping the gradients\n    with tf.GradientTape() as tape:\n        #explicitly telling to watch for input vector. it won't watch with repect to any inputs by default.\n        #it only watches the gradents with weight vectors\n        tape.watch(x_tensor)\n        #model predictions\n        preds = model(x_tensor)\n        #getting the loss\n        loss = loss_to_ckgrads(temp_outs, preds)\n    #getting the gradients    \n    grads = tape.gradient(loss, x_tensor)\n    return grads\n##making temp_feature as varible. We can get the gradients only if it is a varible so chnaging it to variable\ntemp_features = tf.Variable(tf.convert_to_tensor(temp_features, dtype=tf.float32))\n##\ngrads = get_gradient(basic_model_debug, temp_features)\nfor i in grads:\n    #checking whether all zeros or not\n    #except 3rd all the grdients should be zero i.e True\n    print(all(i==0))\n\nTrue\nTrue\nFalse\nTrue\nTrue\n\n\n If you are not getting all true except the i-th one, you may have any issue in your code. You have to check that and resolve it. Without that, don’t go to another step.\n\n\nWhat to do when Loss Explodes\nwhile training NN, you may get NaN/inf loss becuase of large or small values. Below are some causes\n\nNumerical stability issues.\n\nCheck the multiplications, if you are multiplying so many tensors at once, apply log and make it to addition.\nCheck for the division operation. any zero division is happening or not. Try to add a small constant like 1e-12 to the denominator.\nCheck the softmax function. If your vocab size if very large, try not to use the softmax function. calculate the loss based on the logits.\n\nIf the updates to the weights are very large, you may get numerical instability and it may explode.\n\nCheck for the Learning rate. If the learning rate is high, you may get this problem as well.\nCheck for the exploding gradient problem. In tensorboard, you can visualize the gradient histograms and you can check the problem. If gradients are exploding, try to clip the gradients. You can apply tf.linalg.normalize or tf.clip_by_value to your gradients after getting gradients from the GradientTape.\n\nIt may occur because of a poor choice of loss function i.e. allowing the calculation of large error values.\nIt may occur because of the poor data preparation i.e. allowing large differences in the target variables.\n\n\n\nWhat to do when loss Increases\nwhile training NN, our loss may increase some times. Below are some causes\n\nCheck for the Learning rate. If the learning rate is high, you may get this problem as well.\nCheck for the wrong loss function. Especially sign of the loss function.\nActivation functions applying over wrong dimensions. (you can find this out using the point number 1(checking forward propagation is correct or not)\n\n\n\nWhat to do when loss Oscillate\nwhile training NN, our loss may oscillate. Below are some causes\n\nCheck for the Learning rate. If the learning rate is high, you may get this problem as well.\nSometimes it may occur because of the exploding gradient problem. so check for that one as well. You can check this using the Tensorboard.\nIt may occur due to data pairing issues/data corruption. We already discussed this. so make sure to get the proper data.\n\n\n\nWhat to do when loss is constant\nwhile training NN, our loss constant. Below are some causes\n\nIf the updates to the weights are very low, you may end up in the same position.\n\nCheck for the learning rate. If the learning rate is low, our weights won’t update much so you may get this problem.\nCheck for Vanishing Gradient problem. In Tensorboard, you can visualize the gradient histograms and you can check the problem.\n\nYou can solve this by changing the activations to relu/leaky relu.\nYou can add skip connections to an easier flow of gradients.\nIf you have long sequences in RNN, you can divide into smaller ones and train with stateful LSTM’s(Truncated Back prop)\nBetter weight initialization may reduce this.\n\n\nToo much regularization may also cause this.\nIf you are using Relu activation, it may occur due to the dead neurons.\nIncorrect inputs to the loss function. I already discussed this while discussing the loss functions.\n\n\n\nWhat if we get memory Errors\nwhile training NN, many people face the memory exhaust errors because of the computing constraints.\n\nIf you are getting GPU memory exhaust error, try to reduce the batch size and train the neural network.\nIf your data doesn’t fit into the RAM you have, Try to create a data pipeline using tf.data or Keras/Python Data Generators and load the batchwise data. My personal choice is to use tf.data pipelines. Please check this blog to know more about it.\nPlease try to check for the duplicate operations like creating multiple models, storing temporary variables in the GPU memory.\n\n\n\nWhat if we Underfit to the data\nsome suggestions to make in decreasing order of priority\n\nMake your model bigger\nReduce/Remove regularization(L1/L2/Dropout) if any.\nDo error analysis. based on this try to change the preprocessing/data if needed.\nRead technical papers and choose the state of the art models.\nTune hyperparameters\nAdd custom features if needed.\n\n\n\nWhat if we Overfit to the data\nsome suggestions to make in decreasing order of priority\n\nAdd more training data\nAdd normalization layers(BN, layer norm)\nAdd data augmentation\nIncrease regularization\nDo error analysis. based on this try to change the preprocessing/data if needed.\nChoose a different model\nTune hyperparameters\n\n You can check some of my other blogs at this link. This is my LinkedIn and GitHub"
  },
  {
    "objectID": "notebooks/Hypothesis-Testing.html",
    "href": "notebooks/Hypothesis-Testing.html",
    "title": "Hypothesis Testing",
    "section": "",
    "text": "We start with a null hypothesis (H0) that represents the currect state ( Nothing going on, =, &lt;=, &gt;=)\nWe also have an alternative hypothesis(HA) that represents the research question we are testing. ( something is hoing on, !=, &gt;, &lt;)\nWe conduct a hypothesis test under the assumption that null hypothesis is true, either via simulation(Permutation test) or theoretical test using CLT.\n\nChoose a test statistic\nCompute the test statistic.\nDetermine the frequency distribution of the test statistic under the hypothesis.\nMake a decision using this distribution as a guide as discussed in the point-4.\n\nIf the test results suggest that the data do not provide convincing evidence for the alternative hypothesis, we stick with the null hypothesis. If they do, then we reject the null hypothesis in the favor of the alternate hypothesis. If P value is low (Lower than significance level), we say that it is unlikely to observe the data if the null hypotheis were true, and hence reject the null hypothesis. If it is High, we won’t reject the null hypothesis.\n\nAlways construct hypotheses about population parameters (e.g. population mean, μ) and not the sample statistics (e.g. sample mean)\n\nNote that the alternative hypothesis might be one-sided (μ &lt; or &gt; the null value) or two-sided (μ≠ the null value), and the choice depends on the research question.\n\n\n\nImportant: P Value is the probability of obtaining a value of your test statistic that is at least as extream as what ws observed, under the assumption the null hypothesis is true. It is not the probability that the null hypothesis is True.\n\n\n\nNote: P Value = Conditional probability of data given null hypothesis is true = P(observed or more extreme sample statistic ∣ H0 true)\n\n\n\n\nAnalyze the problem and state the Null Hypothesis\nState the Alternate Hypothesis\nChoose a test statistic and Compute the test statistic\nDetermine the frequency distribution of the test statistic under the hypothesis.\nCalculate the P-Value for your CL based on two tail/single tail.\nMake a decision.\n\n\nYou can do one tailed or two tailed test based on the alternate hypothesis.\n\nA two sided Hypothesis with significance level alpha is equivalent to a confidence interval with \\(CL = 1 - \\alpha\\)\nA one sided Hypothesis with significance level alpha is equivalent to a confidence interval with \\(CL = 1- (2*\\alpha)\\)\n\n\n\n\n‘hypothesis cl’\n\n\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\n# figure size in inches\nrcParams['figure.figsize'] = 11.7,8.27\n\n\n#you can download the data from https://www.kaggle.com/spscientist/students-performance-in-exams\nsample_data = pd.read_csv(\"datasets_74977_169835_StudentsPerformance.csv\")\n\n\n##sample data \nsample_data.head()\n\n\n\n\n\n\n\n\ngender\nrace/ethnicity\nparental level of education\nlunch\ntest preparation course\nmath score\nreading score\nwriting score\n\n\n\n\n0\nfemale\ngroup B\nbachelor's degree\nstandard\nnone\n72\n72\n74\n\n\n1\nfemale\ngroup C\nsome college\nstandard\ncompleted\n69\n90\n88\n\n\n2\nfemale\ngroup B\nmaster's degree\nstandard\nnone\n90\n95\n93\n\n\n3\nmale\ngroup A\nassociate's degree\nfree/reduced\nnone\n47\n57\n44\n\n\n4\nmale\ngroup C\nsome college\nstandard\nnone\n76\n78\n75\n\n\n\n\n\n\n\n\n##value counts of educatioin level\nsample_data['parental level of education'].value_counts()\n\nsome college          226\nassociate's degree    222\nhigh school           196\nsome high school      179\nbachelor's degree     118\nmaster's degree        59\nName: parental level of education, dtype: int64\n\n\n\n#test preparation \nsample_data['test preparation course'].value_counts()\n\nnone         642\ncompleted    358\nName: test preparation course, dtype: int64"
  },
  {
    "objectID": "notebooks/Hypothesis-Testing.html#framework",
    "href": "notebooks/Hypothesis-Testing.html#framework",
    "title": "Hypothesis Testing",
    "section": "",
    "text": "We start with a null hypothesis (H0) that represents the currect state ( Nothing going on, =, &lt;=, &gt;=)\nWe also have an alternative hypothesis(HA) that represents the research question we are testing. ( something is hoing on, !=, &gt;, &lt;)\nWe conduct a hypothesis test under the assumption that null hypothesis is true, either via simulation(Permutation test) or theoretical test using CLT.\n\nChoose a test statistic\nCompute the test statistic.\nDetermine the frequency distribution of the test statistic under the hypothesis.\nMake a decision using this distribution as a guide as discussed in the point-4.\n\nIf the test results suggest that the data do not provide convincing evidence for the alternative hypothesis, we stick with the null hypothesis. If they do, then we reject the null hypothesis in the favor of the alternate hypothesis. If P value is low (Lower than significance level), we say that it is unlikely to observe the data if the null hypotheis were true, and hence reject the null hypothesis. If it is High, we won’t reject the null hypothesis.\n\nAlways construct hypotheses about population parameters (e.g. population mean, μ) and not the sample statistics (e.g. sample mean)\n\nNote that the alternative hypothesis might be one-sided (μ &lt; or &gt; the null value) or two-sided (μ≠ the null value), and the choice depends on the research question.\n\n\n\nImportant: P Value is the probability of obtaining a value of your test statistic that is at least as extream as what ws observed, under the assumption the null hypothesis is true. It is not the probability that the null hypothesis is True.\n\n\n\nNote: P Value = Conditional probability of data given null hypothesis is true = P(observed or more extreme sample statistic ∣ H0 true)\n\n\n\n\nAnalyze the problem and state the Null Hypothesis\nState the Alternate Hypothesis\nChoose a test statistic and Compute the test statistic\nDetermine the frequency distribution of the test statistic under the hypothesis.\nCalculate the P-Value for your CL based on two tail/single tail.\nMake a decision.\n\n\nYou can do one tailed or two tailed test based on the alternate hypothesis.\n\nA two sided Hypothesis with significance level alpha is equivalent to a confidence interval with \\(CL = 1 - \\alpha\\)\nA one sided Hypothesis with significance level alpha is equivalent to a confidence interval with \\(CL = 1- (2*\\alpha)\\)\n\n\n\n\n‘hypothesis cl’\n\n\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\n# figure size in inches\nrcParams['figure.figsize'] = 11.7,8.27\n\n\n#you can download the data from https://www.kaggle.com/spscientist/students-performance-in-exams\nsample_data = pd.read_csv(\"datasets_74977_169835_StudentsPerformance.csv\")\n\n\n##sample data \nsample_data.head()\n\n\n\n\n\n\n\n\ngender\nrace/ethnicity\nparental level of education\nlunch\ntest preparation course\nmath score\nreading score\nwriting score\n\n\n\n\n0\nfemale\ngroup B\nbachelor's degree\nstandard\nnone\n72\n72\n74\n\n\n1\nfemale\ngroup C\nsome college\nstandard\ncompleted\n69\n90\n88\n\n\n2\nfemale\ngroup B\nmaster's degree\nstandard\nnone\n90\n95\n93\n\n\n3\nmale\ngroup A\nassociate's degree\nfree/reduced\nnone\n47\n57\n44\n\n\n4\nmale\ngroup C\nsome college\nstandard\nnone\n76\n78\n75\n\n\n\n\n\n\n\n\n##value counts of educatioin level\nsample_data['parental level of education'].value_counts()\n\nsome college          226\nassociate's degree    222\nhigh school           196\nsome high school      179\nbachelor's degree     118\nmaster's degree        59\nName: parental level of education, dtype: int64\n\n\n\n#test preparation \nsample_data['test preparation course'].value_counts()\n\nnone         642\ncompleted    358\nName: test preparation course, dtype: int64"
  },
  {
    "objectID": "notebooks/Hypothesis-Testing.html#comparing-two-independent-samples",
    "href": "notebooks/Hypothesis-Testing.html#comparing-two-independent-samples",
    "title": "Hypothesis Testing",
    "section": "Comparing two independent samples",
    "text": "Comparing two independent samples\n\n2 groups must be independent with-in groups as well as between the groups.\nIf we have skewness in the sample distribution, we need more samples for hypothesis testing.\n\n\nProblem Statement\nWe have to check whether there is a difference in the math score in students who completed the preparation course and not.\n\n###math scores of test completed and not completed\nmath_score_with_test = sample_data['math score'][sample_data['test preparation course']=='completed']\nmath_score_wo_test = sample_data['math score'][sample_data['test preparation course']=='none']\n\n\n##no of students\nprint(\"No of students completed the course\", len(math_score_with_test))\nprint(\"No of students not completed the course\", len(math_score_wo_test))\n\nNo of students completed the course 358\nNo of students not completed the course 642\n\n\n\n#Plotting distribution of mathscores of compeleted students\nsns.distplot(math_score_with_test, hist=True, kde=True, color='red', norm_hist=True, label=\"Completed the course\")\nplt.legend()\n\n\n\n\n\n\n\n\n\n#Plotting distribution of mathscores of not compeleted students\nsns.distplot(math_score_wo_test, hist=True, kde=True, color='red', norm_hist=True, label=\"not completed the course\")\nplt.legend()\n\n\n\n\n\n\n\n\nStep-1: We can compare the mean scores of both groups. so Null Hypothesis is “There is no difference in both groups”\nH0 = There is no difference between the two groups.\nmu_group1 = mu_group2\nmu_group1 - mu_group2 = 0\n\nStep-2: Alternate Hypothesis is “There is a difference between the two groups”\nH0 = There is no difference between the two groups.\nmu_group1 != mu_group2\nmu_group1 - mu_group2 != 0\n\nStep-3: Test Statistic and Calculate the Observed Test Statistic\nT_obs = observed_group1_mean - observed_group2_mean = 5.617649106319291\n\nT_obs = math_score_with_test.mean() - math_score_wo_test.mean()\nT_obs\n\n5.617649106319291\n\n\nStep-4: Simulate the distribution using the permutation test\n#### Permutation simulation Let’s say we have n1 elements in group1 and n2 elements in the group2.\n\nCombine the group1, group2.\nfor each permutation data sample\n\ntake first n1 elements as group1, rest n2 samples as group2.\ncalculate the test statistic\n\n\n\n\nCode\n\n##we can get the permutations from np.random.permutations. \nfor i in range(5):\n    print(np.random.permutation([1, 2, 3, 4, 5]))\n\n[3 2 4 1 5]\n[4 3 5 1 2]\n[5 1 3 4 2]\n[4 2 3 1 5]\n[3 2 5 1 4]\n\n\n\ndata_sample = np.concatenate([math_score_with_test, math_score_wo_test])\nn1 = len(math_score_with_test)\ndist_test_stat = []\nnp.random.seed(85)\nfor i in range(1000000):\n    out = np.random.permutation(data_sample) ##random permutation\n    ts_cal = out[:n1].mean() - out[n1:].mean() ##getting stat difference\n    dist_test_stat.append(ts_cal)\n\n\nsns.distplot(dist_test_stat, hist=True, kde=True, color='red', norm_hist=True, label=\"Test Statistic distribution\")\nplt.legend()\n\n\n\n\n\n\n\n\n\nprob = sum(np.array(dist_test_stat)&gt;=T_obs)/1000000\n\n\nprob\n\n1e-06\n\n\nStep-5: Calculation the P-Value\nFor two tailed test \\(\\text{P Value} = 2*min([0.5, prob, 1-prob])\\)\none tailed test with ‘greater than’ alternate hypothesis \\(\\text{P Value} = prob\\)\none tailed test with ‘less than’ alternate hypothesis \\(\\text{P Value} = 1- (prob)\\)\n\nP_value = 2*np.min([0.5, prob, 1-prob])\nprint('P_value', P_value)\n\nP_value 2e-06\n\n\nStep-6: Make a Decision:\nFor Significance Level of 5% (95% CL), P_value is very less so we reject the null hypothisis in favour of alternate.\n\nNote: In place of Test Statistic, you can use any formulation even t test stat also.\n\nYou can do all the avove with permute module of Python.\n\n\nCode with permute module\n\nfrom permute.core import two_sample\nsample_test = two_sample(x=math_score_with_test, y=math_score_wo_test, reps=100000, \n                         stat='mean', alternative='two-sided', keep_dist=True, seed=10)\n\n\nsns.distplot(sample_test[2], hist=True, kde=True, color='red', norm_hist=True, label=\"Test Statistic distribution\")\nplt.legend()\n\n\n\n\n\n\n\n\n\nprint(\"observed test Statistic\", sample_test[1])\nprint(\"P-Value\", sample_test[0])\n\nobserved test Statistic 5.617649106319291\nP-Value 1.999980000199998e-05\n\n\n\n\nAnother way to test\n\nGet the CI of the mean(any stat) of two samples.\nIf those CI not overlap, there is a difference between those.\n\n\nfrom arch.bootstrap import IIDBootstrap\nbs = IIDBootstrap(math_score_with_test)\nprint('Studentized-t CI of scores of test completed students--&gt;', bs.conf_int(func=np.mean, reps=1000, method='bca', size=0.95))\n\nStudentized-t CI of scores of test completed students--&gt; [[68.34468215]\n [71.1424581 ]]\n\n\n\nbs = IIDBootstrap(math_score_wo_test)\nprint('Studentized-t CI of scores of test not completed students--&gt;', bs.conf_int(func=np.mean, reps=1000, method='bca', size=0.95))\n\nStudentized-t CI of scores of test not completed students--&gt; [[62.91883691]\n [65.28373942]]\n\n\nThere is no overlap between these 95% CI, so there is a difference.\n\nTip: What if we want to check mu_group1 - mu_group2 = some_number? We can formulate that as mu_group1 - mu_group2 - some_number = 0 =&gt; mu_group1 - (mu_group2 + some_number) = 0 or (mu_group1 - some_number) - mu_group2 = 0"
  },
  {
    "objectID": "notebooks/Hypothesis-Testing.html#comparing-two-dependent-samplespaired-test",
    "href": "notebooks/Hypothesis-Testing.html#comparing-two-dependent-samplespaired-test",
    "title": "Hypothesis Testing",
    "section": "Comparing two dependent samples(Paired Test):",
    "text": "Comparing two dependent samples(Paired Test):\nThis type of test may be needed for pre-post study on the same people or repeated measures on the same set of people. In our sample data, let’s say we want to compare scores of reading and writing that are equal or not.\n\nIn the above problem, students are same in the both samples. so there is a dependency, they are not independent.\nTwo groups must be of same size because its a paired data.(n1=n2=n)\n\n\nHow to solve?\n\nGet the difference(any value that you want to find) of two samples, so we will get n samples.\nDo 1 sample hypothesis test to find the difference is zero or not. or use bootstrapping to get the CI and check.\n\n\n\nOne-sample Hypothesis test using permutation\nWe have to check whether our mean(any stat) is centered around the zero or not. We don’t have two samples to permute so we can add random positive and negative signs and we can shuffle those signs to get the hypothesis null distribution.\n\nreading_score = sample_data['reading score']\nwriting_score = sample_data['writing score']\ndiff_score = reading_score - writing_score\n\nStep-1: Null Hypothesis is “difference of both scores is zero”\nH0 = the difference between both scores is zero.\nmean_diff_score = 0\n\nStep-2: Alternate Hypothesis is “There is a difference in both scores”\nH0 = There is a difference in both scores.\nmean_diff_score != 0\n\nStep-3: Test Statistic and Calculate the Observed Test Statistic\nT_obs = mean(diff_score)\n\nT_obs = diff_score.mean()\nprint(T_obs)\n\n1.115\n\n\nStep-4: Simulate the distribution using the permutation test\n\n\none sample Permutation simulation:\nLet’s say we have n elements.\n\nfor M number of iterations\n\nGenerate random negative and positive signs of length n. \nassign those signs to the elements\ncalculate the statistic value.\n\n\n\n\nCode\n\ndef generate_n_random_signs(n):\n    return 1- 2* np.random.binomial(1, 0.5, size=n)\ngenerate_n_random_signs(10)*np.random.randint(1, 10, 10)\n\narray([ 9,  9,  4,  4, -4, -4,  9,  3, -3,  1])\n\n\n\ndist_test_stat = []\nnp.random.seed(85)\nn = len(diff_score)\nfor i in tqdm(range(1000000)):\n    out = generate_n_random_signs(n) * diff_score\n    ts_cal = out.mean()\n    dist_test_stat.append(ts_cal)\n\n100%|██████████████████████████████████████████████████████████████████████| 1000000/1000000 [08:04&lt;00:00, 2062.25it/s]\n\n\n\n##plotting\nsns.distplot(dist_test_stat, hist=True, kde=True, color='red', norm_hist=True, label=\"Test Statistic distribution\")\nplt.legend()\n\n\n\n\n\n\n\n\n\nprob = sum(np.array(dist_test_stat)&gt;=T_obs)/1000000\n\nStep-5: Calculation the P Value\n\nP_value = 2*np.min([0.5, prob, 1-prob])\nprint('P_value', P_value)\n\nP_value 2e-06\n\n\nStep-6: Make a Decision:\nFor Significance Level of 5% (95% CL), P value is very less so we reject the null hypothisis in favour of alternate.\nYou can do all the avove with permute module of Python.\n\n\nCode with permute module\n\nfrom permute.core import one_sample\none_sample_test = one_sample(x=diff_score, reps=100000, \n                         stat='mean', alternative='two-sided', keep_dist=False, seed=10)\n\n\nprint(\"observed test Statistic\", one_sample_test[1])\nprint(\"P-Value\", one_sample_test[0])\n\n(1.999980000199998e-05, 1.115)"
  },
  {
    "objectID": "notebooks/Hypothesis-Testing.html#comparing-n-independent-samples-permutation-anova",
    "href": "notebooks/Hypothesis-Testing.html#comparing-n-independent-samples-permutation-anova",
    "title": "Hypothesis Testing",
    "section": "Comparing N independent samples: ( Permutation ANOVA)",
    "text": "Comparing N independent samples: ( Permutation ANOVA)\n\nN groups must be independent with-in groups as well as between the groups.\nIf we have skewness in the sample distribution, we need more samples for hypothesis testing.\n\nYou can read about ANOVA at this or this.\n\n\nOne-Way ANOVA:\nUsing one way ANOVA, we can compare the K groups variability. Those K groups must be independent.\nTest statistic for one way ANOVA = \\(\\sum_{k=1}^K n_k(\\overline{X_k} - \\overline{X})^2\\)\n\\(n_k\\) = number of samples in group k\n\\(\\overline{X_k}\\) = Mean of group k\n\\(\\overline{X}\\) = Total mean (All groups)\nExcept for the test statistic, everything is the same, we will permute the groups and calculate the test stat distribution.\n\n\nSteps:\n\nNull Hypothesis - all the means are equal\nAlternate Hypothesis - all means are not equal\nCalculate the observed test statistic\nn times:\n4.1. permute the values. take the first n1 as the first group, next n2 as the second group, .. nk as kth group.\n4.2. calculate the test statistic using the above formula and add to the final dist.\n\nPlot the distribution and calculate the P-value.\n\n\nYou can do above all with permute\n\nsample_data['parental level of education'].value_counts()\n\nsome college          226\nassociate's degree    222\nhigh school           196\nsome high school      179\nbachelor's degree     118\nmaster's degree        59\nName: parental level of education, dtype: int64\n\n\n\nmath_scores = sample_data['math score']\neducation_groups = sample_data['parental level of education'].values\n\nNull Hypothesis = math scores of every group of education is same.\nAlternate Hypothesis = math scores are different in groups.\n\nfrom permute.ksample import k_sample\nns_oneway_anova = k_sample(x=math_scores, group=education_groups, reps=100000, stat='one-way anova', keep_dist=True, seed=10 )\n\n\nsns.distplot(ns_oneway_anova[2], hist=True, kde=True, color='red', norm_hist=True, label=\"Test Statistic distribution\")\nplt.legend()\n\n\n\n\n\n\n\n\n\nprint(\"observed test Statistic\", ns_oneway_anova[1])\nprint(\"P-Value\", ns_oneway_anova[0])\n\nobserved test Statistic 7295.561831098111\nP-Value 9.99990000099999e-06\n\n\nWe can do two way anowas with permute.ksample.bivariate_k_sample"
  },
  {
    "objectID": "notebooks/KNN-Summary.html",
    "href": "notebooks/KNN-Summary.html",
    "title": "Summary - KNN Algorithm",
    "section": "",
    "text": "\\(N\\) - Number of data points\n\\(X_q\\) - query data points\n\\(X_{qn}\\) - nth query data point\n\\(X\\) - input train data\n\\(D\\) - dimensionality of data\n\\(C\\) - Number of classes\n\\(C_i\\) - i^th class\n\\(N_k\\) - K nearst neighbors\n\\(m\\) - Number of epochs in SGD\nThis blog was originally published in this link."
  },
  {
    "objectID": "notebooks/KNN-Summary.html#terminology",
    "href": "notebooks/KNN-Summary.html#terminology",
    "title": "Summary - KNN Algorithm",
    "section": "",
    "text": "\\(N\\) - Number of data points\n\\(X_q\\) - query data points\n\\(X_{qn}\\) - nth query data point\n\\(X\\) - input train data\n\\(D\\) - dimensionality of data\n\\(C\\) - Number of classes\n\\(C_i\\) - i^th class\n\\(N_k\\) - K nearst neighbors\n\\(m\\) - Number of epochs in SGD\nThis blog was originally published in this link."
  },
  {
    "objectID": "notebooks/KNN-Summary.html#algorithm",
    "href": "notebooks/KNN-Summary.html#algorithm",
    "title": "Summary - KNN Algorithm",
    "section": "Algorithm",
    "text": "Algorithm\n\nGiven a query point \\(X_{qn}\\), find the \\(k\\) nearest points in \\(X\\). (You can use any distance metric)\nCount which class has maximum points in those \\(k\\) nearest points and classify given query point \\(X_{qn}\\) belongs to the same class. We can give weightage to the nearest points based on the distance (any function of distance).\nProbability of belonging to the specific class in a classification scenario is\n\n\n\\[\\begin{align}\nP(Y=C_i|X_q) = \\frac{1}{K}\\sum_{i\\epsilon N_k}I(y_i==C_i) \\\\I(true) = 1, I(false) = 0\n\\end{align}\\]\n\n\nIf we use KNN to solve the regression problem, we can get the average of nearest points and gives as output.\n\n\n\\[\\begin{align}\nY_{X_q} = \\frac{1}{K}\\sum_{i\\epsilon N_k}y_i\n\\end{align}\\]"
  },
  {
    "objectID": "notebooks/KNN-Summary.html#useful-points-to-know",
    "href": "notebooks/KNN-Summary.html#useful-points-to-know",
    "title": "Summary - KNN Algorithm",
    "section": "Useful points to know",
    "text": "Useful points to know\n\nThere is no need for any specific process to work with multi-class classification because it works based on nearest neighbors.\nThere is no need for training if we want to use brute force search to get k-nearest neighbors. If we want to use Tree-based/LSH based/graph-based searching, we have to create a corresponding Tree/LSH forest/graph in the training time.\nTesting time complexity is \\(O(ND)\\) if we use brute force search, it is very huge if we have more data points to train. If we need less time complexity go for Tree/LSH/graph-based neighbor search. Many tree algorithms give complexity of \\(O(D*log(N))\\).\n\n\nImportant: You can check the benchmarking of NN searching algorithms in this paper and this GitHub\n\n\nIt works based on distance measure so scaling the features is very important.\nChoosing a distance metric is very crucial. If we require a rotation-invariant distance metric then Euclidean distance is one of the best choices. But in high dimensions, a curious phenomenon arises: the ratio between the nearest and farthest points approaches 1, i.e. the points essentially become uniformly distant from each other. This phenomenon can be observed for a wide variety of distance metrics, but it is more pronounced for the Euclidean metric than, say, the Manhattan distance metric. You can read more about this in this paper.\n\n\nTip: High-dimensional spaces tend to be extremely sparse, which means that every point is far away from virtually every other point, and hence pairwise distances tend to be uninformative so before applying nearest-neighbor classification it is a good idea to plot a histogram of pairwise distances of a data to see if they are sufficiently varied.\n\n\nHigh-dimensional spaces may not give better results so using one-hot vectors may not be useful if have more categorical variables. so, try with mean encoding/frequency-based encoding or use dimensionality reduction techniques/feature selection to get the lower dimensionality data.\nThis is not a linear model, so you can classify the non-linear data.\nAn increase in the feature value not always leads to an increase or decrease in the target outcome/probability so, it is not a monotone model.\nIt won’t consider the interaction between the features. We have to create the interaction features if we need it. More interaction features may lead to less interpretability."
  },
  {
    "objectID": "notebooks/KNN-Summary.html#hyperparameters",
    "href": "notebooks/KNN-Summary.html#hyperparameters",
    "title": "Summary - KNN Algorithm",
    "section": "Hyperparameters",
    "text": "Hyperparameters\n\nK is the Hyperparameter in K-NN.\nThe low value of K will give more variance to the model. increasing the K, reduces the variance, and increases the bias of the model.\nYou can check the decision surface of KNN for different K values in the below image."
  },
  {
    "objectID": "notebooks/KNN-Summary.html#interpretability",
    "href": "notebooks/KNN-Summary.html#interpretability",
    "title": "Summary - KNN Algorithm",
    "section": "Interpretability",
    "text": "Interpretability\n\nThere is a lack of global model interpretability because the model is inherently local and there are no global weights or structures explicitly learned.\nWe can get interpretability based on the data we have i.e. datapoint \\(x_1\\) is similar to the datapoint \\(x_2\\) and \\(x_1\\) caused \\(y\\) so we predict that \\(x_2\\) will cause \\(y\\) as well. So, we can get the k nearest neighbors and we can analyze/interpret those data points.\nIf we have thousands of features, it is very difficult to analyze and get interpretability."
  },
  {
    "objectID": "notebooks/KNN-Summary.html#references",
    "href": "notebooks/KNN-Summary.html#references",
    "title": "Summary - KNN Algorithm",
    "section": "References",
    "text": "References\n\nhttps://stackexchange.com/\nhttps://arxiv.org/pdf/1807.05614.pdf\nhttps://bib.dbvis.de/uploadedFiles/155.pdf\nhttps://helloacm.com/wp-content/uploads/2016/03/2012-10-26-knn-concept.png"
  },
  {
    "objectID": "notebooks/Normalization.html",
    "href": "notebooks/Normalization.html",
    "title": "Normalization for Better Generalization and Faster Training",
    "section": "",
    "text": "Training Deep Neural Networks is complicated by the fact that the distribution of each layer’s inputs changes during training, as the parameters of the previous layers change. This slows down the training by requiring lower learning rates and careful parameter initialization and makes it notoriously hard to train models with saturating nonlinearities. so to overcome this, we can do a normalization after some layers as below.\n\n\n\n\nBN\n\n\n\nIt calculates the batch means, std, and using those, normalizes the data then creates running mean and std which will be used in inference. One intuition about why BatchNorm works is that it removes the internal covariance shift. You can check that in the below video.\n\n\nyoutube: https://www.youtube.com/watch?v=nUUqwaxLnWs\n\n\nAnother intuition:\nBatch Normalization normalizes the activations in the intermediate layers. BN primarily enables training with a larger learning rate which is cause for faster convergence and better generalization.\nLarger batch size training may converge to sharp minima. If we converge to sharp minima, generalization capacity may decrease. so noise in the SGD has an important role in regularizing the NN. Similarly, Higher learning rate will bias the network towards wider minima so it will give the better generalization. But, training with a higher learning rate may cause an explosion in the updates.\nIf we compare the gradients between with batch normalization and without batch normalization, without batch norm network gradients are larger and heavier tailed as shown below so we can train with larger learning rates with BN.\n\n\n\nBNGradeints\n\n\n\n\nImportant: BN is widely adopted in computer vision but, it leads to significant performance degradation for NLP. Nowadays Layer Normalization is preferred normalization technique for NLP tasks.\n\n\n\nNote: BN cannot be applied to online learning tasks. BN cannot applied to extremely large distributed models where the minibatches have to be small. For forward neural networks, BN can be directly applied, because each layer has a fixed number of neurons, and the mean and variance statistics of each neuron in each layer of the network can be directly stored for model prediction, but in the RNNs network, different mini-batch may have different input sequence length, it is difficult to calculate statistical information, and the test sequence length cannot be greater than the maximum training sequence length\n\n\nYou can check the figure below from a paper, which compares the BN in CV and NLP. The differences between running mean/Variance and batch mean/variance exhibit very high variance with extreme outliers in Transformers.\n\n\n\nBN\n\n\n\nimport tensorflow as tf\ninput_layer = tf.keras.Input(shape=(6,))\nbn_layer = tf.keras.layers.BatchNormalization()\nbn_layer_out = bn_layer(input_layer)\nprint('Number of weights is', len(bn_layer.get_weights()))\n\nNumber of weights is 4\n\n\nIf we have n features as input to the BN layer, the weight matrix we have to learn is of size (4, n), i.e. n features for each beta_initializer, gamma_initializer, moving_mean_initializer, moving_variance_initializer. Please read Tensorflow documentation to know more about Training mode, inference mode of the BN layer. It is very important to take care of the mode in BN layer."
  },
  {
    "objectID": "notebooks/Normalization.html#batch-normalization",
    "href": "notebooks/Normalization.html#batch-normalization",
    "title": "Normalization for Better Generalization and Faster Training",
    "section": "",
    "text": "Training Deep Neural Networks is complicated by the fact that the distribution of each layer’s inputs changes during training, as the parameters of the previous layers change. This slows down the training by requiring lower learning rates and careful parameter initialization and makes it notoriously hard to train models with saturating nonlinearities. so to overcome this, we can do a normalization after some layers as below.\n\n\n\n\nBN\n\n\n\nIt calculates the batch means, std, and using those, normalizes the data then creates running mean and std which will be used in inference. One intuition about why BatchNorm works is that it removes the internal covariance shift. You can check that in the below video.\n\n\nyoutube: https://www.youtube.com/watch?v=nUUqwaxLnWs\n\n\nAnother intuition:\nBatch Normalization normalizes the activations in the intermediate layers. BN primarily enables training with a larger learning rate which is cause for faster convergence and better generalization.\nLarger batch size training may converge to sharp minima. If we converge to sharp minima, generalization capacity may decrease. so noise in the SGD has an important role in regularizing the NN. Similarly, Higher learning rate will bias the network towards wider minima so it will give the better generalization. But, training with a higher learning rate may cause an explosion in the updates.\nIf we compare the gradients between with batch normalization and without batch normalization, without batch norm network gradients are larger and heavier tailed as shown below so we can train with larger learning rates with BN.\n\n\n\nBNGradeints\n\n\n\n\nImportant: BN is widely adopted in computer vision but, it leads to significant performance degradation for NLP. Nowadays Layer Normalization is preferred normalization technique for NLP tasks.\n\n\n\nNote: BN cannot be applied to online learning tasks. BN cannot applied to extremely large distributed models where the minibatches have to be small. For forward neural networks, BN can be directly applied, because each layer has a fixed number of neurons, and the mean and variance statistics of each neuron in each layer of the network can be directly stored for model prediction, but in the RNNs network, different mini-batch may have different input sequence length, it is difficult to calculate statistical information, and the test sequence length cannot be greater than the maximum training sequence length\n\n\nYou can check the figure below from a paper, which compares the BN in CV and NLP. The differences between running mean/Variance and batch mean/variance exhibit very high variance with extreme outliers in Transformers.\n\n\n\nBN\n\n\n\nimport tensorflow as tf\ninput_layer = tf.keras.Input(shape=(6,))\nbn_layer = tf.keras.layers.BatchNormalization()\nbn_layer_out = bn_layer(input_layer)\nprint('Number of weights is', len(bn_layer.get_weights()))\n\nNumber of weights is 4\n\n\nIf we have n features as input to the BN layer, the weight matrix we have to learn is of size (4, n), i.e. n features for each beta_initializer, gamma_initializer, moving_mean_initializer, moving_variance_initializer. Please read Tensorflow documentation to know more about Training mode, inference mode of the BN layer. It is very important to take care of the mode in BN layer."
  },
  {
    "objectID": "notebooks/Normalization.html#layer-normalization",
    "href": "notebooks/Normalization.html#layer-normalization",
    "title": "Normalization for Better Generalization and Faster Training",
    "section": "Layer Normalization",
    "text": "Layer Normalization\nUnlike Batch normalization, it normalized horizontally i.e. it normalizes each data point. so \\(\\mu\\), \\(\\sigma\\) not depend on the batch. layer normalization does not have to use “running mean” and “running variance”.\n\n\n\nlayernorm\n\n\nIt gives the better results because of the gradinets with respect to \\(\\mu\\), \\(\\sigma\\) in Layer Normalization. Derivative of \\(\\mu\\) re-centers network gradients to zero. Derivative of \\(\\sigma\\) reduces variance of network gradient, which can be seen a kind of re-scaling.\n\n\nImportant: The parameters of LayerNorm, including the bias and gain, increase the risk of over-fitting, and do not work in most cases. - https://papers.nips.cc/paper/8689-understanding-and-improving-layer-normalization.pdf. You can remove these using center, scale parameters in Tensorflow.\n\n\nimport tensorflow as tf\ninput_layer = tf.keras.Input(shape=(6))\nnorm_layer = tf.keras.layers.LayerNormalization(scale=False, center=False)\nnorm_layer_out = norm_layer(input_layer)\nprint('Number of weights is', len(norm_layer.get_weights()))\n\nNumber of weights is 0\n\n\n\nNote: If there is no gain and bias, number of weights is zero.\n\n\nimport tensorflow as tf\ninput_layer = tf.keras.Input(shape=(10,),batch_size=1)\nnorm_layer = tf.keras.layers.LayerNormalization(scale=True, center=True)\nnorm_layer_out = norm_layer(input_layer)\nprint('Number of weights is', len(norm_layer.get_weights()))\n\nNumber of weights is 2"
  },
  {
    "objectID": "notebooks/Logistic Regression summary-Uday.html",
    "href": "notebooks/Logistic Regression summary-Uday.html",
    "title": "Summary - Logistic Regression Algorithm",
    "section": "",
    "text": "\\(N\\) - Number of data points\n\\(X_q\\) - query data points\n\\(X_{qn}\\) - nth query data point\n\\(X\\) - input train data\n\\(D\\) - dimensionality of data\n\\(C\\) - Number of classes\n\\(C_i\\) - i^th class\n\\(N_k\\) - K nearst neighbors\n\\(m\\) - Number of epochs in SGD\nThis blog was originally published in this link."
  },
  {
    "objectID": "notebooks/Logistic Regression summary-Uday.html#terminology",
    "href": "notebooks/Logistic Regression summary-Uday.html#terminology",
    "title": "Summary - Logistic Regression Algorithm",
    "section": "",
    "text": "\\(N\\) - Number of data points\n\\(X_q\\) - query data points\n\\(X_{qn}\\) - nth query data point\n\\(X\\) - input train data\n\\(D\\) - dimensionality of data\n\\(C\\) - Number of classes\n\\(C_i\\) - i^th class\n\\(N_k\\) - K nearst neighbors\n\\(m\\) - Number of epochs in SGD\nThis blog was originally published in this link."
  },
  {
    "objectID": "notebooks/Logistic Regression summary-Uday.html#algorithm",
    "href": "notebooks/Logistic Regression summary-Uday.html#algorithm",
    "title": "Summary - Logistic Regression Algorithm",
    "section": "Algorithm",
    "text": "Algorithm\nWe have to optimize the log loss value. We can do this using the Gradient Descent. optimization problem is\n\\[\\begin{align}\n\\min_{W, b} \\sum_{i=1}^N \\log(e^{- y_i (X_i^T W + b)} + 1)\\\\\n\\text{ here }  C = 2 \\text{ and } y_i = +1 \\text{ or } -1\n\\end{align}\\]\n\nonce after optimization, we will get the W, b where loss \\(L(W,b)\\) is minimum. We can predict the class probability of a query point using W, b as below.\n\\[\\begin{align}\nP(y=1 | X_{qn}, W, b) = \\frac{1}{1+e^{-(WX_{qn}+b)}}\n\\end{align}\\]\nWe can re-write the above same loss formulation as below,\n\\[\\begin{align}\n\\min_{W_{1},W_{2}...W_{C}, b}- \\frac{1}{N} \\sum_{i=0}^{N-1} \\sum_{C=0}^{C-1} y_{i,c} \\log p_{i,c}\\\\\ny_{i,c} = 1 \\text{if sample i has label C taken from a set of C labels else 0} \\\\\np_{i,c} = \\frac{1}{1+e^{-(W_{C}X_{i}+b)}}\n\\end{align}\\]\nOnce after calculating W vectors, we can get C probabilities using \\(p_{i, c}\\) and then classify the given query point as maximum probability class.\n\nWe can write the final formulation with regularization as below\n\\[\\begin{align}\n\\min_{W, b} C * \\sum_{i=1}^N L(W,b) + \\text{regularization term}\n\\end{align}\\]\n\\[\\text{or}\\]\n\\[\\begin{align}\n\\min_{W, b}  \\sum_{i=1}^N L(W,b) + \\lambda * \\text{regularization term}\n\\end{align}\\] \nWe can handle multi-class classification in 3 ways, 1. Using one-vs-rest approach and first formulation of loss 2. Using one-vs-one approach and first formulation of loss 3. Multinomial logistic regression - 2nd formulation of loss and softmax function in the place of sigmoid function to get C class probabilities.\n\nYou can read more about LR in this blog and this blog"
  },
  {
    "objectID": "notebooks/Logistic Regression summary-Uday.html#useful-points-to-know",
    "href": "notebooks/Logistic Regression summary-Uday.html#useful-points-to-know",
    "title": "Summary - Logistic Regression Algorithm",
    "section": "Useful points to know",
    "text": "Useful points to know\n\nIf we want to use logistic regression for multi-class classification, we have to use one-vs-rest/one-vs-one/multinomial.\nTime complexity of training is \\(O(mCND)\\) and prediction is \\(O(CD)\\). Prediction time is very less so we can use logistic regression for low latency applications.\nWe can train the model using the iterative algorithm so there is no need to load total data into RAM (We can load chunk by chunk if we have huge data). We can use this model in online training too. Check the partial_fit function in sklearn implementation.\nIt assumes\n\nObservations should not come from repeated measurements.\nNone or Little Multicollinearity\nThe linearity of independent variables and Log odds - It requires features that are linearly related to the log-odds/logits, i.e \\(log(\\frac{P}{1-P})\\)\n\nWe can parallelize the multi-class logistic regression using one-vs-rest in sklearn. If you want for binary classification, use data parallelization, and accumulate gradients.\nIt is a linear model, it cannot classify non-linear data. If you have non-linear data, do feature engineering and try to get linear data.\nHigher dimensional data (not Huge) may lead to linear separable sometimes.\nAn increase in the feature value always leads to an increase or decrease in the target outcome(not probability, to logit/log-odds) so, it is a monotone model to log-odds/logits. Please check the interpretability below to know more about logit.\nIt won’t consider the interaction between the features. We have to create the interaction features if we need it. More interaction features may lead to less interpretability."
  },
  {
    "objectID": "notebooks/Logistic Regression summary-Uday.html#hyperparameters",
    "href": "notebooks/Logistic Regression summary-Uday.html#hyperparameters",
    "title": "Summary - Logistic Regression Algorithm",
    "section": "Hyperparameters",
    "text": "Hyperparameters\n\nC is the main hyperparameter we have (this is different from C classes we are using)\nHigh C value means less regularization strength.\nC is a multiplicative constant to loss term. While optimization we have to find the minimum value of the loss(Log loss+regularization). If we increase the C value, Log loss has to decrease so that final loss will decrease, i.e log loss will get very near to zero if C increases, so it may be overly certain about training data, so it overfits.\nThe below image contains decision hyperplanes for each value of C. You can observe that increasing the C value is reducing the regularization and overfitting to the data.\n\n\n\n\n\nHyperplane\n\n\n\n\nIn the above figure, we are getting similar classification results for all C greater than 0.5 but, increasing the C value reduces the regularization strength and increases the magnitude of weight vector values. You can check that in the below figure. \nIf two hyperplanes are giving similar results, get the best hyperplane based on the magnitude of weights. low weight is better because it gives more regularization and it won’t overestimate the probability value.\n\n\nImportant: Let’s take two planes. plane1 is 1.5f1 + 2.4f2 + 1 = 0, plane2 is 4.5f1 + 7.2f2 + 3 = 0. Both planes are mathematically same, only weight values are changed, but for a query point (0, 0), plane1 will give a probability of 0.73 and plane2 will give a probability of 0.95. But, the distance of the point (0,0) from both planes is the same that is 0.35 only. so large weights lead to overestimation of probabilities even though they are near to the plane."
  },
  {
    "objectID": "notebooks/Logistic Regression summary-Uday.html#interpretability",
    "href": "notebooks/Logistic Regression summary-Uday.html#interpretability",
    "title": "Summary - Logistic Regression Algorithm",
    "section": "Interpretability",
    "text": "Interpretability\nFrom logistic regression prediction probability function, we can write\n\n\\[\\begin{align}\nlog\\left(\\frac{P(y=1)}{1-P(y=1)}\\right)=log\\left(\\frac{P(y=1)}{P(y=0)}\\right)=W_{0}+W_{1}x_{1}+\\ldots+W_{d}x_{d}\n\\end{align}\\]\n\n\\[\\begin{align}\nodds = \\left(\\frac{P(y=1)}{1-P(y=1)}\\right)=\\left(\\frac{P(y=1)}{P(y=0)}\\right)=e^{W_{0}+W_{1}x_{1}+\\ldots+W_{d}x_{d}}\n\\end{align}\\]\n\nIf odds = 3 then \\(P(y=1)\\) is thrice as high as \\(P(y=0)\\)\n\nIf the feature \\(x_{j}\\) is changed by n unit and the ratio of odds after the change and before the change is\n\\[\\begin{align}\n\\frac{odds_{x_j+n}}{odds}=\\frac{e^{\\left(W_{0}+W{1}x_{1}+\\ldots+W_{j}(x_{j}+n)+\\ldots+W_{d}x_{d}\\right)}}{e^{\\left(W_{0}+W_{1}x_{1}+\\ldots+W_{j}x_{j}+\\ldots+W_{d}x_{d}\\right)}}\n\\end{align}\\]\n\n\\[\\begin{align}\n\\frac{odds_{x_j+1}}{odds}=e^{\\left(W_{j}(x_{j}+n)-W_{j}x_{j}\\right)}=e^{\\left(nW_j\\right)}\n\\end{align}\\]\n If we increase the feature \\(x_{j}\\) by n unit, the odds change by factor of \\(e^{nW_j}\\)\nWe can interpret the odds. If odds = k, \\(P(y=1) = k*P(y=0)\\)"
  },
  {
    "objectID": "notebooks/Logistic Regression summary-Uday.html#references",
    "href": "notebooks/Logistic Regression summary-Uday.html#references",
    "title": "Summary - Logistic Regression Algorithm",
    "section": "References",
    "text": "References\n\nhttps://stackexchange.com/\nAn Introduction to Statistical Learning - Book\nhttps://www.jeremyjordan.me/content/images/2017/06/Screen-Shot-2017-06-10-at-9.41.25-AM.png"
  }
]